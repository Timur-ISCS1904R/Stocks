// src/lib/errorHandler.js
class AppError extends Error {
  constructor(message, type = 'GENERIC_ERROR', statusCode = 500, details = {}) {
    super(message);
    this.name = 'AppError';
    this.type = type;
    this.statusCode = statusCode;
    this.details = details;
    this.timestamp = new Date().toISOString();
  }
}

class ErrorHandler {
  static logError(error, context = {}) {
    const errorInfo = {
      timestamp: new Date().toISOString(),
      message: error.message,
      stack: error.stack,
      type: error.type || 'UNKNOWN',
      context: {
        url: window.location.href,
        userAgent: navigator.userAgent,
        userId: context.userId,
        component: context.component,
        action: context.action,
        ...context
      }
    };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π
    console.group(`üö® Error: ${error.type || 'UNKNOWN'}`);
    console.error('Message:', error.message);
    console.error('Context:', errorInfo.context);
    if (error.stack) console.error('Stack:', error.stack);
    console.groupEnd();

    // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if (process.env.NODE_ENV === 'production') {
      this.sendToLoggingService(errorInfo);
    }

    return errorInfo;
  }

  static async sendToLoggingService(errorInfo) {
    try {
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å (Sentry, LogRocket, etc.)
      // await fetch('/api/log-error', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(errorInfo)
      // });
    } catch (loggingError) {
      console.error('Failed to send error to logging service:', loggingError);
    }
  }

  static handleApiError(error, context = {}) {
    let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    let errorType = 'API_ERROR';

    if (error.message?.includes('401')) {
      userMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
      errorType = 'UNAUTHORIZED';
    } else if (error.message?.includes('403')) {
      userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.';
      errorType = 'FORBIDDEN';
    } else if (error.message?.includes('404')) {
      userMessage = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      errorType = 'NOT_FOUND';
    } else if (error.message?.includes('Network')) {
      userMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      errorType = 'NETWORK_ERROR';
    }

    const appError = new AppError(userMessage, errorType, 0, {
      originalError: error.message,
      ...context
    });

    this.logError(appError, context);
    return appError;
  }

  static handleValidationError(field, message, value) {
    const error = new AppError(
      `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è "${field}": ${message}`,
      'VALIDATION_ERROR',
      400,
      { field, value }
    );
    
    this.logError(error, { component: 'validation', field });
    return error;
  }

  static handleDatabaseError(error, operation, table) {
    let userMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    let errorType = 'DATABASE_ERROR';

    if (error.message?.includes('duplicate key')) {
      userMessage = '–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
      errorType = 'DUPLICATE_ERROR';
    } else if (error.message?.includes('foreign key')) {
      userMessage = '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.';
      errorType = 'FOREIGN_KEY_ERROR';
    } else if (error.message?.includes('check constraint')) {
      userMessage = '–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.';
      errorType = 'CONSTRAINT_ERROR';
    }

    const appError = new AppError(userMessage, errorType, 0, {
      originalError: error.message,
      operation,
      table
    });

    this.logError(appError, { operation, table });
    return appError;
  }
}

// React Hook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export function useErrorHandler() {
  const [error, setError] = React.useState(null);
  const [loading, setLoading] = React.useState(false);

  const handleError = React.useCallback((error, context = {}) => {
    const processedError = ErrorHandler.handleApiError(error, context);
    setError(processedError);
    return processedError;
  }, []);

  const clearError = React.useCallback(() => {
    setError(null);
  }, []);

  const withErrorHandling = React.useCallback(async (asyncFunction, context = {}) => {
    try {
      setLoading(true);
      setError(null);
      const result = await asyncFunction();
      return result;
    } catch (error) {
      handleError(error, context);
      throw error; // Re-throw –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    } finally {
      setLoading(false);
    }
  }, [handleError]);

  return {
    error,
    loading,
    handleError,
    clearError,
    withErrorHandling
  };
}

export { AppError, ErrorHandler };