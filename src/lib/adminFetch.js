// src/lib/adminFetch.js
import { supabase } from '../supabaseClient';
import { ErrorHandler } from './errorHandler';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ backend API —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function adminFetch(path, options = {}) {
  const {
    method = 'GET',
    body,
    headers = {},
    retries = 3,
    retryDelay = 1000,
    timeout = 10000,
    context = {}
  } = options;

  let lastError;
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      console.log(`üì° API Request [${attempt}/${retries}]:`, {
        path,
        method,
        timestamp: new Date().toISOString(),
        context
      });

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.access_token) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
      }

      const API = process.env.REACT_APP_ADMIN_API || 'http://localhost:4000';
      const url = `${API}${path}`;

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      const requestOptions = {
        method,
        headers: {
          'Content-Type': 'application/json',
          ...headers,
          Authorization: `Bearer ${session.access_token}`,
        },
        body: body ? (typeof body === 'string' ? body : JSON.stringify(body)) : undefined,
        signal: controller.signal
      };

      const startTime = performance.now();
      const response = await fetch(url, requestOptions);
      const duration = performance.now() - startTime;
      
      clearTimeout(timeoutId);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      console.log(`üì° API Response:`, {
        path,
        status: response.status,
        duration: Math.round(duration),
        attempt,
        timestamp: new Date().toISOString()
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorText;
        } catch {
          errorMessage = errorText || `HTTP ${response.status}`;
        }

        const error = new Error(`API ${response.status}: ${errorMessage}`);
        error.status = response.status;
        error.path = path;
        error.method = method;
        
        // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (400-499)
        if (response.status >= 400 && response.status < 500) {
          throw ErrorHandler.handleApiError(error, { 
            path, 
            method, 
            attempt,
            ...context 
          });
        }
        
        throw error;
      }

      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      const contentType = response.headers.get('content-type') || '';
      const result = contentType.includes('application/json') 
        ? await response.json() 
        : await response.text();

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö)
      console.log(`‚úÖ API Success:`, {
        path,
        dataSize: typeof result === 'string' ? result.length : Object.keys(result).length,
        duration: Math.round(duration)
      });

      return result;

    } catch (error) {
      lastError = error;
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      console.error(`‚ùå API Error [${attempt}/${retries}]:`, {
        path,
        method,
        error: error.message,
        attempt,
        willRetry: attempt < retries && isRetryableError(error)
      });

      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (!isRetryableError(error) || attempt === retries) {
        throw ErrorHandler.handleApiError(error, {
          path,
          method,
          attempt,
          totalAttempts: retries,
          ...context
        });
      }

      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
      const delay = retryDelay * Math.pow(2, attempt - 1);
      console.log(`‚è≥ Retrying in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  throw lastError;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
 */
function isRetryableError(error) {
  // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  if (error.status >= 400 && error.status < 500) {
    return false;
  }

  // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏
  return (
    error.name === 'AbortError' || // timeout
    error.message?.includes('Network') ||
    error.message?.includes('fetch') ||
    error.status >= 500 ||
    !error.status // –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ = —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
  );
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export const adminAPI = {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  async getUsers() {
    return adminFetch('/api/users', {
      context: { operation: 'getUsers' }
    });
  },

  async createUser(userData) {
    return adminFetch('/api/admin/users/create', {
      method: 'POST',
      body: userData,
      context: { operation: 'createUser', email: userData.email }
    });
  },

  async deleteUser(userId) {
    return adminFetch('/api/admin/users/delete', {
      method: 'POST',
      body: { user_id: userId },
      context: { operation: 'deleteUser', userId }
    });
  },

  // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  async getPermissions() {
    return adminFetch('/api/permissions', {
      context: { operation: 'getPermissions' }
    });
  },

  async updatePermissions(permissions) {
    return adminFetch('/api/permissions', {
      method: 'POST',
      body: permissions,
      context: { operation: 'updatePermissions', userId: permissions.user_id }
    });
  },

  // –ê—É–¥–∏—Ç
  async getAudit(params = {}) {
    const query = new URLSearchParams(params).toString();
    const path = query ? `/api/audit?${query}` : '/api/audit';
    
    return adminFetch(path, {
      context: { operation: 'getAudit', params }
    });
  }
};